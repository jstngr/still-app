{"version":3,"file":"57.js","mappings":"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","sources":["webpack://Still App/./node_modules/@capacitor-community/sqlite/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.jeepSqliteElement = null;\n        this.isWebStoreOpen = false;\n    }\n    async initWebStore() {\n        await customElements.whenDefined('jeep-sqlite');\n        this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n        this.ensureJeepSqliteIsAvailable();\n        this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', (event) => {\n            this.notifyListeners('sqliteImportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', (event) => {\n            this.notifyListeners('sqliteExportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteHTTPRequestEnded', (event) => {\n            this.notifyListeners('sqliteHTTPRequestEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqlitePickDatabaseEnded', (event) => {\n            this.notifyListeners('sqlitePickDatabaseEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteSaveDatabaseToDisk', (event) => {\n            this.notifyListeners('sqliteSaveDatabaseToDiskEvent', event.detail);\n        });\n        if (!this.isWebStoreOpen) {\n            this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n        }\n        return;\n    }\n    async saveToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromLocalDiskToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromLocalDiskToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async saveToLocalDisk(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToLocalDisk(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async echo(options) {\n        this.ensureJeepSqliteIsAvailable();\n        const echoResult = await this.jeepSqliteElement.echo(options);\n        return echoResult;\n    }\n    async createConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.createConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async open(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.open(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async closeConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.closeConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getVersion(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const versionResult = await this.jeepSqliteElement.getVersion(options);\n            return versionResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async checkConnectionsConsistency(options) {\n        this.ensureJeepSqliteIsAvailable();\n        try {\n            const consistencyResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n            return consistencyResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async close(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.close(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async beginTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.beginTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async commitTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.commitTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async rollbackTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.rollbackTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTransactionActive(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const result = await this.jeepSqliteElement.isTransactionActive(options);\n            return result;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getTableList(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableListResult = await this.jeepSqliteElement.getTableList(options);\n            return tableListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async execute(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.execute(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async executeSet(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.executeSet(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async run(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const runResult = await this.jeepSqliteElement.run(options);\n            return runResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async query(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const queryResult = await this.jeepSqliteElement.query(options);\n            return queryResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const dbExistsResult = await this.jeepSqliteElement.isDBExists(options);\n            return dbExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBOpen(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDBOpenResult = await this.jeepSqliteElement.isDBOpen(options);\n            return isDBOpenResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDatabaseResult = await this.jeepSqliteElement.isDatabase(options);\n            return isDatabaseResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTableExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n            return tableExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteDatabase(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isJsonValid(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n            return isJsonValidResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async importFromJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const importFromJsonResult = await this.jeepSqliteElement.importFromJson(options);\n            return importFromJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async exportToJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const exportToJsonResult = await this.jeepSqliteElement.exportToJson(options);\n            return exportToJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async createSyncTable(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const createSyncTableResult = await this.jeepSqliteElement.createSyncTable(options);\n            return createSyncTableResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async setSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.setSyncDate(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const getSyncDateResult = await this.jeepSqliteElement.getSyncDate(options);\n            return getSyncDateResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteExportedRows(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteExportedRows(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async addUpgradeStatement(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.addUpgradeStatement(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async copyFromAssets(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.copyFromAssets(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromHTTPRequest(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromHTTPRequest(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getDatabaseList() {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const databaseListResult = await this.jeepSqliteElement.getDatabaseList();\n            return databaseListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    /**\n     * Checks if the `jeep-sqlite` element is present in the DOM.\n     * If it's not in the DOM, this method throws an Error.\n     *\n     * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n     */\n    ensureJeepSqliteIsAvailable() {\n        if (this.jeepSqliteElement === null) {\n            throw new Error(`The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`);\n        }\n    }\n    ensureWebstoreIsOpen() {\n        if (!this.isWebStoreOpen) {\n            /**\n             * if (!this.isWebStoreOpen)\n              this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n             */\n            throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n        }\n    }\n    ////////////////////////////////////\n    ////// UNIMPLEMENTED METHODS\n    ////////////////////////////////////\n    async getUrl() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getMigratableDbList(options) {\n        console.log('getMigratableDbList', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async addSQLiteSuffix(options) {\n        console.log('addSQLiteSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async deleteOldDatabases(options) {\n        console.log('deleteOldDatabases', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async moveDatabasesAndAddSuffix(options) {\n        console.log('moveDatabasesAndAddSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isSecretStored() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async setEncryptionSecret(options) {\n        console.log('setEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async changeEncryptionSecret(options) {\n        console.log('changeEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async clearEncryptionSecret() {\n        console.log('clearEncryptionSecret');\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async checkEncryptionSecret(options) {\n        console.log('checkEncryptionPassPhrase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getNCDatabasePath(options) {\n        console.log('getNCDatabasePath', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async createNCConnection(options) {\n        console.log('createNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async closeNCConnection(options) {\n        console.log('closeNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isNCDatabase(options) {\n        console.log('isNCDatabase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isDatabaseEncrypted(options) {\n        console.log('isDatabaseEncrypted', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigEncryption() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigBiometricAuth() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async loadExtension(options) {\n        console.log('loadExtension', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async enableLoadExtension(options) {\n        console.log('enableLoadExtension', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["CapacitorSQLiteWeb","constructor","super","arguments","this","jeepSqliteElement","isWebStoreOpen","initWebStore","customElements","whenDefined","document","querySelector","ensureJeepSqliteIsAvailable","addEventListener","event","notifyListeners","detail","isStoreOpen","saveToStore","options","ensureWebstoreIsOpen","err","Error","getFromLocalDiskToStore","saveToLocalDisk","echo","createConnection","open","closeConnection","getVersion","checkConnectionsConsistency","close","beginTransaction","commitTransaction","rollbackTransaction","isTransactionActive","getTableList","execute","executeSet","run","query","isDBExists","isDBOpen","isDatabase","isTableExists","deleteDatabase","isJsonValid","importFromJson","exportToJson","createSyncTable","setSyncDate","getSyncDate","deleteExportedRows","addUpgradeStatement","copyFromAssets","getFromHTTPRequest","getDatabaseList","getUrl","unimplemented","getMigratableDbList","console","log","addSQLiteSuffix","deleteOldDatabases","moveDatabasesAndAddSuffix","isSecretStored","setEncryptionSecret","changeEncryptionSecret","clearEncryptionSecret","checkEncryptionSecret","getNCDatabasePath","createNCConnection","closeNCConnection","isNCDatabase","isDatabaseEncrypted","isInConfigEncryption","isInConfigBiometricAuth","loadExtension","enableLoadExtension"],"sourceRoot":""}