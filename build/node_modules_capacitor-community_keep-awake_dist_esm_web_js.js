"use strict";
(self["webpackChunkFeed_and_Sleep"] = self["webpackChunkFeed_and_Sleep"] || []).push([["node_modules_capacitor-community_keep-awake_dist_esm_web_js"],{

/***/ "./node_modules/@capacitor-community/keep-awake/dist/esm/web.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@capacitor-community/keep-awake/dist/esm/web.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeepAwakeWeb: function() { return /* binding */ KeepAwakeWeb; }
/* harmony export */ });
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ "./node_modules/@capacitor/core/dist/index.js");

class KeepAwakeWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {
    constructor() {
        super(...arguments);
        this.wakeLock = null;
        this._isSupported = typeof navigator !== 'undefined' && 'wakeLock' in navigator;
        this.handleVisibilityChange = () => {
            if (document.visibilityState === 'visible')
                this.keepAwake();
        };
    }
    async keepAwake() {
        if (!this._isSupported) {
            this.throwUnsupportedError();
        }
        if (this.wakeLock) {
            await this.allowSleep();
        }
        this.wakeLock = await navigator.wakeLock.request('screen');
        document.addEventListener('visibilitychange', this.handleVisibilityChange);
        document.addEventListener('fullscreenchange', this.handleVisibilityChange);
    }
    async allowSleep() {
        var _a;
        if (!this._isSupported) {
            this.throwUnsupportedError();
        }
        (_a = this.wakeLock) === null || _a === void 0 ? void 0 : _a.release();
        this.wakeLock = null;
        document.removeEventListener('visibilitychange', this.handleVisibilityChange);
        document.removeEventListener('fullscreenchange', this.handleVisibilityChange);
    }
    async isSupported() {
        const result = {
            isSupported: this._isSupported,
        };
        return result;
    }
    async isKeptAwake() {
        if (!this._isSupported) {
            this.throwUnsupportedError();
        }
        const result = {
            isKeptAwake: !!this.wakeLock,
        };
        return result;
    }
    throwUnsupportedError() {
        throw this.unavailable('Screen Wake Lock API not available in this browser.');
    }
}
//# sourceMappingURL=web.js.map

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor-community_keep-awake_dist_esm_web_js.js.map