"use strict";
(self["webpackChunkFeed_and_Sleep"] = self["webpackChunkFeed_and_Sleep"] || []).push([["node_modules_capacitor_screen-orientation_dist_esm_web_js"],{

/***/ "./node_modules/@capacitor/screen-orientation/dist/esm/web.js":
/*!********************************************************************!*\
  !*** ./node_modules/@capacitor/screen-orientation/dist/esm/web.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScreenOrientationWeb: function() { return /* binding */ ScreenOrientationWeb; }
/* harmony export */ });
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ "./node_modules/@capacitor/core/dist/index.js");

class ScreenOrientationWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {
    constructor() {
        super();
        if (typeof screen !== 'undefined' &&
            typeof screen.orientation !== 'undefined') {
            screen.orientation.addEventListener('change', () => {
                const type = screen.orientation.type;
                this.notifyListeners('screenOrientationChange', { type });
            });
        }
    }
    async orientation() {
        if (typeof screen === 'undefined' || !screen.orientation) {
            throw this.unavailable('ScreenOrientation API not available in this browser');
        }
        return { type: screen.orientation.type };
    }
    async lock(options) {
        if (typeof screen === 'undefined' ||
            !screen.orientation ||
            !screen.orientation.lock) {
            throw this.unavailable('ScreenOrientation API not available in this browser');
        }
        try {
            await screen.orientation.lock(options.orientation);
        }
        catch (_a) {
            throw this.unavailable('ScreenOrientation API not available in this browser');
        }
    }
    async unlock() {
        if (typeof screen === 'undefined' ||
            !screen.orientation ||
            !screen.orientation.unlock) {
            throw this.unavailable('ScreenOrientation API not available in this browser');
        }
        try {
            screen.orientation.unlock();
        }
        catch (_a) {
            throw this.unavailable('ScreenOrientation API not available in this browser');
        }
    }
}
//# sourceMappingURL=web.js.map

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor_screen-orientation_dist_esm_web_js.js.map